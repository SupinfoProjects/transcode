{
  "name": "node-celery",
  "version": "0.2.6",
  "description": "Celery client for Node",
  "author": {
    "name": "Mher Movsisyan",
    "email": "mher.movsisyan@gmail.com"
  },
  "dependencies": {
    "amqp": "*",
    "node-uuid": "*",
    "redis": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mher/node-celery.git"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "engine": "node >= 0.8.2",
  "main": "celery.js",
  "contributors": [
    {
      "name": "=================================="
    },
    {
      "name": "AUTHORS",
      "url": "in chronological order"
    },
    {
      "name": "=================================="
    },
    {
      "name": "Mher Movsisyan"
    },
    {
      "name": "Esco Obong"
    },
    {
      "name": "Jeffrey Luyau"
    },
    {
      "name": "Mihail Mikov"
    },
    {
      "name": "Colin Hubert"
    },
    {
      "name": "Ivo Rothschild"
    },
    {
      "name": "Jack Williams"
    },
    {
      "name": "David Gouldin"
    },
    {
      "name": "Hidetaka Matsumoto"
    },
    {
      "name": "Harshit Mittal"
    }
  ],
  "readme": "# Celery client for Node.js\n\n[![NPM Version](https://img.shields.io/npm/v/node-celery.svg)](https://img.shields.io/npm/v/node-celery.svg)\n[![Downloads](https://img.shields.io/npm/dm/node-celery.svg)](https://img.shields.io/npm/dm/node-celery.svg)\n\nCelery is an asynchronous task/job queue based on distributed\nmessage passing. node-celery allows to queue tasks from Node.js.\nIf you are new to Celery check out http://celeryproject.org/\n\n## Usage\n\nSimple example, included as [examples/hello-world.js](https://github.com/mher/node-celery/blob/master/examples/hello-world.js):\n\n```javascript\nvar celery = require('node-celery'),\n\tclient = celery.createClient({\n\t\tCELERY_BROKER_URL: 'amqp://guest:guest@localhost:5672//',\n\t\tCELERY_RESULT_BACKEND: 'amqp'\n\t});\n\nclient.on('error', function(err) {\n\tconsole.log(err);\n});\n\nclient.on('connect', function() {\n\tclient.call('tasks.echo', ['Hello World!'], function(result) {\n\t\tconsole.log(result);\n\t\tclient.end();\n\t});\n});\n```\n\n**Note:** When using AMQP as result backend with celery prior to version\n3.1.7 the result queue needs to be non durable or it will fail with a:\nQueue.declare: (406) PRECONDITION_FAILED.\n\n```javascript\nvar celery = require('node-celery'),\n\tclient = celery.createClient({\n\t\tCELERY_TASK_RESULT_DURABLE: false\n\t});\n```\n\nFor RabbitMQ backends, the entire broker options can be passed as an object that is handed off to AMQP.\nThis allows you to specify parameters such as SSL keyfiles, vhost, and connection timeout among others.\n\n```javascript\nvar celery = require('node-celery'),\n\tclient = celery.createClient({\n\t\tCELERY_BROKER_OPTIONS: {\n\t\t\thost: 'localhost',\n\t\t\tport: '5672',\n\t\t\tlogin: 'guest',\n\t\t\tpassword: 'guest',\n\t\t\tauthMechanism: 'AMQPLAIN',\n\t\t\tvhost: '/',\n\t\t\tssl: {\n\t\t\t\tenabled: true,\n\t\t\t\tkeyFile: '/path/to/keyFile.pem',\n\t\t\t\tcertFile: '/path/to/certFile.pem',\n\t\t\t\tcaFile: '/path/to/caFile.pem'\n\t\t\t}\n\t\t},\n\t\tCELERY_RESULT_BACKEND: 'amqp'\n\t});\n```\n\n### ETA\n\nThe ETA (estimated time of arrival) lets you set a specific date and time that is the earliest time at which your task will be executed:\n\n```javascript\nvar celery = require('node-celery'),\n\tclient = celery.createClient({\n\t\tCELERY_BROKER_URL: 'amqp://guest:guest@localhost:5672//',\n\t});\n\nclient.on('connect', function() {\n\tclient.call('send-email', {\n\t\tto: 'to@example.com',\n\t\ttitle: 'sample email'\n\t}, {\n\t\teta: new Date(Date.now() + 60 * 60 * 1000) // an hour later\n\t});\n});\n```\n\n### Expiration\n\nThe expires argument defines an optional expiry time, a specific date and time using Date:\n\n```javascript\nvar celery = require('node-celery'),\n\tclient = celery.createClient({\n\t\tCELERY_BROKER_URL: 'amqp://guest:guest@localhost:5672//',\n\t});\n\nclient.on('connect', function() {\n\tclient.call('tasks.sleep', [2 * 60 * 60], null, {\n\t\texpires: new Date(Date.now() + 60 * 60 * 1000) // expires in an hour\n\t});\n});\n```\n\n### Backends\n\nThe backend is used to store task results. Currently AMQP (RabbitMQ) and Redis backends are supported.\n\n```javascript\nvar celery = require('node-celery'),\n\tclient = celery.createClient({\n\t\tCELERY_BROKER_URL: 'amqp://guest:guest@localhost:5672//',\n\t\tCELERY_RESULT_BACKEND: 'redis://localhost/0'\n\t});\n\nclient.on('connect', function() {\n\tvar result = client.call('tasks.add', [1, 2]);\n\tsetTimeout(function() {\n\t\tresult.get(function(data) {\n\t\t\tconsole.log(data); // data will be null if the task is not finished\n\t\t});\n\t}, 2000);\n});\n```\n\nAMQP backend allows to subscribe to the task result and get it immediately, without polling:\n\n```javascript\nvar celery = require('node-celery'),\n\tclient = celery.createClient({\n\t\tCELERY_BROKER_URL: 'amqp://guest:guest@localhost:5672//',\n\t\tCELERY_RESULT_BACKEND: 'amqp'\n\t});\n\nclient.on('connect', function() {\n\tvar result = client.call('tasks.add', [1, 2]);\n\tresult.on('ready', function(data) {\n\t\tconsole.log(data);\n\t});\n});\n```\n\n### Routing\n\nThe simplest way to route tasks to different queues is using CELERY_ROUTES configuration option:\n\n```javascript\nvar celery = require('node-celery'),\n\tclient = celery.createClient({\n\t\tCELERY_BROKER_URL: 'amqp://guest:guest@localhost:5672//',\n\t\tCELERY_ROUTES: {\n\t\t\t'tasks.send_mail': {\n\t\t\t\tqueue: 'mail'\n\t\t\t}\n\t\t}\n\t}),\n\tsend_mail = client.createTask('tasks.send_mail'),\n\tcalculate_rating = client.createTask('tasks.calculate_rating');\n\nclient.on('error', function(err) {\n\tconsole.log(err);\n});\n\nclient.on('connect', function() {\n\tsend_mail.call([], {\n\t\tto: 'to@example.com',\n\t\ttitle: 'hi'\n\t}); // sends a task to the mail queue\n\tcalculate_rating.call([], {\n\t\titem: 1345\n\t}); // sends a task to the default queue\n});\n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mher/node-celery/issues"
  },
  "homepage": "https://github.com/mher/node-celery",
  "_id": "node-celery@0.2.6",
  "_shasum": "d77bb43e199abc96d1bc86dc7b084b84783d35fa",
  "_from": "https://registry.npmjs.org/node-celery/-/node-celery-0.2.6.tgz",
  "_resolved": "https://registry.npmjs.org/node-celery/-/node-celery-0.2.6.tgz"
}
